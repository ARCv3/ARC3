# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS LIVE

on: 'workflow_dispatch'
      
env:
  AWS_REGION: us-east-2                  # set this to your preferred AWS region, e.g. us-west-1
  ECS_CLUSTER: arc-live-cluster                # set this to your Amazon ECS cluster name
  CONTAINER_NAME: arc
  ECS_SERVICE: arc-live-service
  ECS_TD: .github/workflows/td.json

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: LIVE

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: "140023379914.dkr.ecr.us-east-2.amazonaws.com"
          ECR_REPOSITORY: "arc-api-repo"
          IMAGE_TAG: ${{ github.sha }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
        run: |
          # Generate the Environment file
          touch .env

          echo MONGODB_URI=${{ secrets.MONGODB_URI }} >> .env
          echo DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }} >> .env
          echo DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }} >> .env
          echo TOKEN=${{ secrets.TOKEN }} >> .env
          echo GUILD_ID=${{ secrets.GUILD_ID }} >> .env

          cat .env

          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TD }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}


      - name: Inject environment in the Amazon ECS task definition
        id: add-env-var
        uses: cvmaker-bv/amazon-ecs-task-environment@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          container-name: "arc"
          env-variables: "${{ toJson(env) }}"
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
          TOKEN: ${{ secrets.TOKEN }}
          GUILD_ID: ${{ secrets.GUILD_ID }}


      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.add-env-var.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
